<?php
/**
 * @file
 * Integrates piwik statistics as entity field.
 *
 * TODO Implement a menu local task tab for showing statistical information
 * on any entity, independend from it's content. With permission controll.
 * TODO Implement a full views integration.
 */

/**
 * No errors while filling the piwik stats fields.
 */
define('PIWIK_STATS_OK', 0);

/**
 * A HTTP error occurred during the API request.
 */
define('PIWIK_STATS_ERROR_HTTP', 1);

/**
 * The returned XML data could not be parsed.
 */
define('PIWIK_STATS_ERROR_XML', 2);

/**
 * The returned XML data was empty and holds no data.
 */
define('PIWIK_STATS_NO_DATA', 3);

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function piwik_stats_field_info() {
  return array(
    'piwik_stats' => array(
      'label' => t('Piwik Statistical Field'),
      'description' => t('Holds piwiks statistical information of a node.'),
      'default_widget' => 'piwik_stats_hidden',
      'default_formatter' => 'piwik_stats_statistics_text',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function piwik_stats_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  // Add field settings for statistic period.
  $form['period'] = array(
    '#type' => 'select',
    '#title' => t('Period'),
    '#default_value' => @$settings['period'],
    '#options' => array(
      'day' => t('Day'),
      'week' => t('Week'),
      'month' => t('Month'),
      'year' => t('Year'),
    ),
    '#required' => TRUE,
    '#description' => t('The period of the requested statistics.'),
  );
  return $form;
}

/**
 * Implements hook_field_formatter_info().
 */
function piwik_stats_field_formatter_info() {
  // TODO Implement some nice formatters.
}

/**
 * Implements hook_field_formatter_view().
 */
function piwik_stats_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // TODO Implement some nice formatters.
}

/**
 * Implements hook_field_widget_info().
 *
 * Defining a hidden pseudo widget.
 */
function piwik_stats_field_widget_info() {
  return array(
    'piwik_stats_hidden' => array(
      'label' => t('None, filled by cron'),
      'field types' => array('piwik_stats'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds piwik stats settings to piwik configuration.
 */
function piwik_stats_form_piwik_admin_settings_form_alter(&$form, &$form_state, $form_id) {
  $form['account']['piwik_stats_token_auth'] = array(
    '#type' => 'textfield',
    '#title' => t('Piwik authentication token'),
    '#default_value' => variable_get('piwik_stats_token_auth', ''),
    '#size' => 80,
    '#maxlength' => 34,
    '#required' => TRUE,
    '#description' => t('This is needed by Piwik Statistical Field to request statistic data.'),
  );
  // Add cron run settings.
  $form['advanced']['piwik_stats_cron_fill'] = array(
    '#type' => 'checkbox',
    '#title' => t('Fill Piwik fields on cron run'),
    '#default_value' => variable_get('piwik_stats_cron_fill', TRUE),
    '#description' => t('If enabled, Piwik Statistical fields will be filled on cron run.'),
  );
  // Add submit callback to save input.
  $form['#submit'][] = 'piwik_stats_piwik_admin_settings_form_submit';
  // Submit button for refreshing piwik_stats table.
  $form['actions']['fill_piwik_stats'] = array(
    '#type' => 'submit',
    '#submit' => array('piwik_stats_piwik_admin_settings_fill_statistical_fields_submit'),
    '#value' => t('Fill statistical Piwik fields'),
  );
}

/**
 * Submit callback for piwik configuration form.
 */
function piwik_stats_piwik_admin_settings_form_submit($form, &$form_state) {
  // Trim and save authentication token.
  variable_set('piwik_stats_token_auth', trim($form_state['input']['piwik_stats_token_auth']));
}

/**
 * Submit callback for filling piwik_stats fields manually.
 */
function piwik_stats_piwik_admin_settings_fill_statistical_fields_submit($form, &$form_state) {
  // Start filling the fields.
  $status = piwik_stats_fill_fields(
    variable_get('piwik_stats_token_auth', ''),
    variable_get('piwik_site_id', 0),
    variable_get('piwik_url_http', '')
  );

  // Check the result and print it.
  switch ($status) {
    case PIWIK_STATS_OK:
      drupal_set_message(t('All Piwik Statistical Fields were filled successfully.'));
      break;
    case PIWIK_STATS_ERROR_HTTP:
      drupal_set_message(t('Requesting Piwik Statistics failed: HTTP error.'), 'error');
      break;
    case PIWIK_STATS_ERROR_XML:
      drupal_set_message(t('Requesting Piwik Statistics failed: Could not parse XML.'), 'error');
      break;
    case PIWIK_STATS_NO_DATA:
      drupal_set_message(t('Requesting Piwik Statistics failed: There was no data available.'), 'error');
      break;
  }
}

/**
 * Implements hook_cron().
 *
 * If set, statistical piwik fields will be filled on cron run.
 */
function piwik_stats_cron() {
  if (variable_get('piwik_stats_cron_fill', TRUE)) {
    // Fill them!
    $status = piwik_stats_fill_fields(
      variable_get('piwik_stats_token_auth', ''),
      variable_get('piwik_site_id', 0),
      variable_get('piwik_url_http', '')
    );

    // Check the result and log it.
    switch ($status) {
      case PIWIK_STATS_OK:
        watchdog('piwik_stats', 'All Piwik Statistical Fields were filled successfully.');
        break;
      case PIWIK_STATS_ERROR_HTTP:
        watchdog('piwik_stats', 'Requesting Piwik Statistics failed: HTTP returned: @code.',
          array('@code' => $result->code), WATCHDOG_ERROR);
        break;
      case PIWIK_STATS_ERROR_XML:
        watchdog('piwik_stats', 'Requesting Piwik Statistics failed: Could not parse XML.',
          array(), WATCHDOG_ERROR);
        break;
      case PIWIK_STATS_NO_DATA:
        watchdog('piwik_stats', 'Requesting Piwik Statistics failed: There was no data available.',
          array(), WATCHDOG_ERROR);
        break;
    }
  }
}

/**
 * Re/Fills the Piwik Statistical Fields with statistical data.
 *
 * @param string $token_auth
 *   Authentication token needed to authenticate with piwik.
 * @param int $site_id
 *   Unique site ID of piwik.
 * @param string $piwik_url
 *   URL to piwik.
 *
 * @return int
 *   Integer representing a status code.
 */
function piwik_stats_fill_fields($token_auth, $site_id, $piwik_url) {
  // Get all fields of type piwik_stats.
  $piwik_fields = field_read_fields(array(
    'type' => 'piwik_stats',
  ));

  // Iterate through all piwik fields.
  foreach ($piwik_fields as $field_name => $field) {

    // Get all instances of a piwik_stats field.
    $field_instances = field_read_instances(array(
      'field_id' => $field['id'],
    ));

    // Request piwik XML data.
    $result = _piwik_stats_api_request(
      $piwik_url,
      $token_auth,
      'Actions.getPageUrls',
      $site_id,
      $field['settings']['period']
    );
    // Check HTTP status code of response.
    if ($result->code != 200 || $result->headers['content-type'] != 'text/xml; charset=utf-8') {
      return PIWIK_STATS_ERROR_HTTP;
    }

    // Parse XML data.
    $xml = new SimpleXMLElement($result->data);
    // Be shure that there is really some data to work with.
    if (isset($xml->error)) {
      return PIWIK_STATS_ERROR_XML;
    }
    elseif (empty($xml)) {
      return PIWIK_STATS_NO_DATA;
    }

    // Iterate through all instances of a piwik field.
    foreach ($field_instances as $field_instance) {

      // Get a list of all entity objects holding the needed id's.
      $entities = _piwik_stats_get_entities($field_instance['entity_type'], $field_instance['bundle']);

      // Iterate through the list of entities with fields to fill.
      foreach ($entities as $entity) {

        // Get the default URI of the current entity.
        $entity_uri = entity_uri($field_instance['entity_type'], $entity);
        // Get all URL aliases linked to the entity URI.
        $urls = _piwik_stats_get_aliases($entity_uri['path']);

        // Sum up all statistical data of each URL to a piwik field.
        $piwik_stats_field = _piwik_stats_summarize_field($urls, $xml);
        // Add the filled piwik stats field to the entity.
        $entity->$field_name = $piwik_stats_field;

        // Save the updated piwik fields.
        field_attach_update($field_instance['entity_type'], $entity);
      }
    }
  }

  return PIWIK_STATS_OK;
}

/**
 * Sends a Piwik API request.
 *
 * TODO Think about caching response data here.
 *
 * @param string $piwik_url
 *   URL to piwik.
 * @param string $token_auth
 *   Authentication token needed to authenticate with piwik.
 * @param string $method
 *   Piwik API request method.
 * @param int $site_id
 *   Unique site ID of piwik.
 * @param string $period
 *   Statistical period.
 *   Default is 'year' but also 'day', 'week' or 'month' is possible.
 * @param int $date
 *   Statistic base date.
 * @param string $format
 *   API return format. Default is XML but also CSV, TSV and JSON is possible.
 *
 * @return object
 *   The returned object of drupal_http_request().
 */
function _piwik_stats_api_request($piwik_url, $token_auth, $method, $site_id, $period = 'year', $date = 'now', $format = 'xml') {
  $result_object = drupal_http_request(
    url($piwik_url,
      array(
        'query' => array(
          'module' => 'API',
          'method' => $method,
          'idSite' => $site_id,
          'period' => $period,
          'date' => $date,
          'format' => $format,
          'token_auth' => $token_auth,
          'expanded' => TRUE,
        ),
      )
    )
  );
  return $result_object;
}

/**
 * Returns a list of entity objects only holding entity id's.
 *
 * TODO Think about caching data here.
 *
 * @param string $type
 *   The entity type.
 * @param string $bundle
 *   The entity bundle.
 *
 * @return array
 *   An array of lightweight entity objects as returned from database.
 */
function _piwik_stats_get_entities($type, $bundle) {
  // Get information about entity type.
  $entity_info = entity_get_info($type);

  // Get all entity id's of a specific type and bundle.
  $select = db_select($entity_info['base table'], 'b');
  $select->addField('b', $entity_info['entity keys']['id']);
  // Some entity tables neither have revisisons nor bundles.
  if (! empty($entity_info['entity keys']['revision'])) {
    $select->addField('b', $entity_info['entity keys']['revision']);
  }
  if (! empty($entity_info['entity keys']['bundle'])) {
    $select->addField('b', $entity_info['entity keys']['bundle']);
    $select->condition('b.type', $bundle);
  }
  $entities = $select->execute()->fetchAll();

  return $entities;
}

/**
 * Returns a list of url aliases of a system path.
 *
 * @param string $uri
 *   A system path, eg. an entity URI.
 *
 * @return array
 *   An array of url aliases.
 */
function _piwik_stats_get_aliases($uri) {
  // The URLs we get from piwik are absolute, so we transform them as needed.
  $urls = array(url($uri, array('absolute' => TRUE, 'alias' => TRUE)));

  // Grab all URL aliases of the system URI.
  $select = db_select('url_alias', 'u');
  $select->addField('u', 'alias');
  $select->condition('u.source', $uri);
  $aliases = $select->execute()->fetchAll();
  foreach ($aliases as $alias) {
    $urls[] = url($alias->alias, array('absolute' => TRUE, 'alias' => TRUE));
  }

  return $urls;
}

/**
 * Summarizes all statistical data from XML with matching URLs.
 *
 * @param array $urls
 *   An array of url aliases.
 * @param object $xml
 *   A XML object containing piwik URL statistics.
 *
 * @return array
 *   An array representing the filled piwik_stats field.
 */
function _piwik_stats_summarize_field($urls, $xml) {
  // Initialize field values as needed.
  $stats = array();
  $stats['und'][0]['nb_visits'] = 0;
  $stats['und'][0]['nb_hits'] = 0;
  $stats['und'][0]['entry_nb_visits'] = 0;
  $stats['und'][0]['entry_nb_actions'] = 0;
  $stats['und'][0]['entry_sum_visit_length'] = 0;
  $stats['und'][0]['entry_bounce_count'] = 0;
  $stats['und'][0]['exit_nb_visits'] = 0;
  $stats['und'][0]['sum_time_spent'] = 0;
  $stats['und'][0]['bounce_rate'] = 0;
  $stats['und'][0]['exit_rate'] = 0;

  // Iterate thorugh all url aliases and sum up statistics.
  foreach ($urls as $url) {
    // Grab statistical data from XML per URL.
    $url_stats = $xml->xpath('//url[text()="' . $url . '"]/..');

    if (! empty($url_stats)) {
      // The following values are integers and can be summed up easily.
      if (isset($url_stats[0]->nb_visits)) {
        $stats['und'][0]['nb_visits'] += $url_stats[0]->nb_visits;
      }
      if (isset($url_stats[0]->nb_hits)) {
        $stats['und'][0]['nb_hits'] += $url_stats[0]->nb_hits;
      }
      if (isset($url_stats[0]->entry_nb_visits)) {
        $stats['und'][0]['entry_nb_visits'] += $url_stats[0]->entry_nb_visits;
      }
      if (isset($url_stats[0]->entry_nb_actions)) {
        $stats['und'][0]['entry_nb_actions'] += $url_stats[0]->entry_nb_actions;
      }
      if (isset($url_stats[0]->entry_sum_visit_length)) {
        $stats['und'][0]['entry_sum_visit_length'] += $url_stats[0]->entry_sum_visit_length;
      }
      if (isset($url_stats[0]->entry_bounce_count)) {
        $stats['und'][0]['entry_bounce_count'] += $url_stats[0]->entry_bounce_count;
      }
      if (isset($url_stats[0]->exit_nb_visits)) {
        $stats['und'][0]['exit_nb_visits'] += $url_stats[0]->exit_nb_visits;
      }
      if (isset($url_stats[0]->sum_time_spent)) {
        $stats['und'][0]['sum_time_spent'] += $url_stats[0]->sum_time_spent;
      }
      // These two are percent values (##% formatted).
      // We need to transform them to integers before we can sum them.
      if (isset($url_stats[0]->bounce_rate)) {
        $stats['und'][0]['bounce_rate'] += (int) drupal_substr($url_stats[0]->bounce_rate, 0, -1);
      }
      if (isset($url_stats[0]->exit_rate)) {
        $stats['und'][0]['exit_rate'] += (int) drupal_substr($url_stats[0]->exit_rate, 0, -1);
      }
    }
  }

  return $stats;
}
