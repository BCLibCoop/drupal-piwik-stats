<?php
/**
 * @file
 * Integrates piwik statistics as entity field.
 */

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function piwik_stats_field_info() {
  return array(
    'piwik_stats' => array(
      'label' => t('Piwik Statistical Field'),
      'description' => t('Holds piwiks statistical information of a node.'),
      'default_widget' => 'piwik_stats_hidden',
      'default_formatter' => 'piwik_stats_statistics_text',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function piwik_stats_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  // Add field settings for statistic period.
  $form['period'] = array(
    '#type' => 'select',
    '#title' => t('Period'),
    '#default_value' => @$settings['period'],
    '#options' => array(
      'day' => t('Day'),
      'week' => t('Week'),
      'month' => t('Month'),
      'year' => t('Year'),
    ),
    '#required' => TRUE,
    '#description' => t('The period of the requested statistics.'),
  );
  return $form;
}

/**
 * Implements hook_field_formatter_info().
 */
function piwik_stats_field_formatter_info() {
  // TODO Implement some nice formatters.
}

/**
 * Implements hook_field_formatter_view().
 */
function piwik_stats_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // TODO Implement some nice formatters.
}

/**
 * Implements hook_field_widget_info().
 *
 * Defining a hidden pseudo widget.
 */
function piwik_stats_field_widget_info() {
  return array(
    'piwik_stats_hidden' => array(
      'label' => t('None, filled by cron'),
      'field types' => array('piwik_stats'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds piwik stats settings to piwik configuration.
 */
function piwik_stats_form_piwik_admin_settings_form_alter(&$form, &$form_state, $form_id) {
  $form['account']['piwik_stats_token_auth'] = array(
    '#type' => 'textfield',
    '#title' => t('Piwik authentication token'),
    '#default_value' => variable_get('piwik_stats_token_auth', ''),
    '#size' => 80,
    '#maxlength' => 34,
    '#required' => TRUE,
    '#description' => t('This is needed by Piwik Statistical Field to request statistic data.'),
  );
  // Add cron run settings.
  $form['advanced']['piwik_stats_cron_fill'] = array(
    '#type' => 'checkbox',
    '#title' => t('Fill Piwik fields on cron run'),
    '#default_value' => variable_get('piwik_stats_cron_fill', TRUE),
    '#description' => t('If enabled, Piwik Statistical fields will be filled on cron run.'),
  );
  // Add submit callback to save input.
  $form['#submit'][] = 'piwik_stats_piwik_admin_settings_form_submit';
  // Submit button for refreshing piwik_stats table.
  $form['actions']['fill_piwik_stats'] = array(
    '#type' => 'submit',
    '#submit' => array('piwik_stats_piwik_admin_settings_fill_statistical_fields_submit'),
    '#value' => t('Fill statistical Piwik fields'),
  );
}

/**
 * Submit callback for piwik configuration form.
 */
function piwik_stats_piwik_admin_settings_form_submit($form, &$form_state) {
  // Trim and save authentication token.
  variable_set('piwik_stats_token_auth', trim($form_state['input']['piwik_stats_token_auth']));
}

/**
 * Submit callback for filling piwik_stats fields.
 */
function piwik_stats_piwik_admin_settings_fill_statistical_fields_submit($form, &$form_state) {
  $result = piwik_stats_fill_fields(
    variable_get('piwik_stats_token_auth', ''),
    variable_get('piwik_site_id', 0),
    variable_get('piwik_url_http', '')
  );

  if ($result) {
    drupal_set_message(t('All Piwik Statistical Fields were filled successfully.'));
  }
  else {
    drupal_set_message(t('Piwik Statistical Fields could not be filled.'), 'error');
  }
}

/**
 * Implements hook_cron().
 *
 * If set, statistical piwik fields will be filled on cron run.
 */
function piwik_stats_cron() {
  if (variable_get('piwik_stats_cron_fill', TRUE)) {
    piwik_stats_fill_fields(
      variable_get('piwik_stats_token_auth', ''),
      variable_get('piwik_site_id', 0),
      variable_get('piwik_url_http', '')
    );
  }
}

/**
 * Re/Fills the Piwik Statistical Fields with statistical data.
 *
 * @param string $token_auth
 *   Authentication token needed to authenticate with piwik.
 * @param int $site_id
 *   Unique site ID of piwik.
 * @param string $piwik_url
 *   URL to piwik.
 */
function piwik_stats_fill_fields($token_auth, $site_id, $piwik_url) {
  if (empty($token_auth) || empty($site_id) || empty($piwik_url)) {
    watchdog('piwik_stats', 'Filling fields failed: Authentication token, site ID and HTTP URL are required', array(), WATCHDOG_ERROR);
    return;
  }

  // Get content types using Piwik Statistical Field.
  // First get all content types.
  $content_types = node_type_get_types();
  foreach ($content_types as $type => $data) {

    // Get all fields of content type.
    $fields = field_info_instances('node', $type);
    foreach ($fields as $field => $data) {

      // Get all piwik fields.
      $field_type = field_info_field($field);
      if ($field_type['type'] == 'piwik_stats') {

        // Request piwik XML data.
        $result = _piwik_stats_api_request($piwik_url, $token_auth, 'Actions.getPageUrls', $site_id, $field_type['settings']['period']);
        if ($result->code ==! 200) {
          watchdog('piwik_stats', 'Requesting Piwik Statistics failed: HTTP returned: @code.', array('@code' => $result->code), WATCHDOG_ERROR);
          return;
        }

        // Parse XML data.
        $xml = new SimpleXMLElement($result->data);
        if (empty($xml)) {
          watchdog('piwik_stats', 'Requesting Piwik Statistics failed: Could not parse XML.', array(), WATCHDOG_ERROR);
          return;
        }

        // Get all nodes of content type.
        $select = db_select('node', 'n');
        $select->addField('n', 'nid');
        $select->addField('n', 'vid');
        $select->addField('n', 'type');
        $select->condition('n.type', $type);
        $nodes = $select->execute()->fetchAll();
        foreach ($nodes as $node) {
          $urls = array();

          // Assemble default absolute node URL.
          $urls[] = url('node/' . $node->nid, array('absolute' => TRUE, 'alias' => TRUE));
          // Get absulute alias URLs.
          $select = db_select('url_alias', 'u');
          $select->addField('u', 'alias');
          $select->condition('u.source', 'node/' . $node->nid);
          $aliases = $select->execute()->fetchAll();
          foreach ($aliases as $alias) {
            $urls[] = url($alias->alias, array('absolute' => TRUE, 'alias' => TRUE));
          }

          // Initialize field values as needed.
          $stats = array();
          $stats['und'][0]['nb_visits'] = 0;
          $stats['und'][0]['nb_hits'] = 0;
          $stats['und'][0]['entry_nb_visits'] = 0;
          $stats['und'][0]['entry_nb_actions'] = 0;
          $stats['und'][0]['entry_sum_visit_length'] = 0;
          $stats['und'][0]['entry_bounce_count'] = 0;
          $stats['und'][0]['exit_nb_visits'] = 0;
          $stats['und'][0]['sum_time_spent'] = 0;
          $stats['und'][0]['bounce_rate'] = 0;
          $stats['und'][0]['exit_rate'] = 0;

          // Iterate thorugh all url aliases and sum up statistics.
          foreach ($urls as $url) {
            // Grab statistical data from XML.
            $url_stats = $xml->xpath('//url[text()="' . $url . '"]/..');

            if (!empty($url_stats)) {
              // The following values are integers and can be summed up easily.
              if (isset($url_stats[0]->nb_visits)) {
                $stats['und'][0]['nb_visits'] += $url_stats[0]->nb_visits;
              }
              if (isset($url_stats[0]->nb_hits)) {
                $stats['und'][0]['nb_hits'] += $url_stats[0]->nb_hits;
              }
              if (isset($url_stats[0]->entry_nb_visits)) {
                $stats['und'][0]['entry_nb_visits'] += $url_stats[0]->entry_nb_visits;
              }
              if (isset($url_stats[0]->entry_nb_actions)) {
                $stats['und'][0]['entry_nb_actions'] += $url_stats[0]->entry_nb_actions;
              }
              if (isset($url_stats[0]->entry_sum_visit_length)) {
                $stats['und'][0]['entry_sum_visit_length'] += $url_stats[0]->entry_sum_visit_length;
              }
              if (isset($url_stats[0]->entry_bounce_count)) {
                $stats['und'][0]['entry_bounce_count'] += $url_stats[0]->entry_bounce_count;
              }
              if (isset($url_stats[0]->exit_nb_visits)) {
                $stats['und'][0]['exit_nb_visits'] += $url_stats[0]->exit_nb_visits;
              }
              if (isset($url_stats[0]->sum_time_spent)) {
                $stats['und'][0]['sum_time_spent'] += $url_stats[0]->sum_time_spent;
              }
              // These two are percent values (##% formatted).
              // We need to transform them to integers before we can sum them up.
              if (isset($url_stats[0]->bounce_rate)) {
                $stats['und'][0]['bounce_rate'] += (int) drupal_substr($url_stats[0]->bounce_rate, 0, -1);
              }
              if (isset($url_stats[0]->exit_rate)) {
                $stats['und'][0]['exit_rate'] += (int) drupal_substr($url_stats[0]->exit_rate, 0, -1);
              }
            }
          }

          // Set Piwik Statistical Field.
          $node->$field = $stats;
          // And save it.
          field_attach_update('node', $node);
        }

        // Clean up the huge xml stuff.
        unset($result, $xml);
      }
    }
  }

  watchdog('piwik_stats', 'All Piwik Statistical Fields were filled successfully.');
  return TRUE;
}

/**
 * Sends a Piwik API request.
 *
 * @param string $piwik_url
 *   URL to piwik.
 * @param string $token_auth
 *   Authentication token needed to authenticate with piwik.
 * @param string $method
 *   Piwik API request method.
 * @param int $site_id
 *   Unique site ID of piwik.
 * @param string $period
 *   Statistical period. Default is 'year' but also 'day', 'week' or 'month' is possible.
 * @param int $date
 *   Statistic base date.
 * @param string $format
 *   API return format. Default is XML but also CSV, TSV and JSON is possible.
 *
 * @return object
 *   The returned object of drupal_http_request().
 */
function _piwik_stats_api_request($piwik_url, $token_auth, $method, $site_id, $period = 'year', $date = 'now', $format = 'xml') {
  $result_object = drupal_http_request(
    url($piwik_url,
      array(
        'query' => array(
          'module' => 'API',
          'method' => $method,
          'idSite' => $site_id,
          'period' => $period,
          'date' => $date,
          'format' => $format,
          'token_auth' => $token_auth,
          'expanded' => TRUE,
        ),
      ),
    ),
  );
  return $result_object;
}
